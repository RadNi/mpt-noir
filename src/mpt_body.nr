pub struct Node {
    rows: [[u8; 32]; 16],
    row_exist: [bool; 16],
    node_type: u8
}


fn calculate_extension_hash(node: Node) -> [u8; 32] {
    // rows: [
    //     [first_limb, second_limb, key_length (other than first byte), ..0]
    //     [right_padded_key (other than first byte)],
    //     [value],
    //     0..0
    // ]
    
    let mut encoded: [u8; 68] = [0; 68];
    let mut encoding_index = 0;
    let first_limb = node.rows[0][0] % 16;
    let second_limb = node.rows[0][1] % 16;
    let key_total_length = node.rows[0][2] + 1;
    let mut rlp_data_length: u8 = 0;
    if key_total_length != 1 {
        rlp_data_length = 
            1 + // key_rlp_prefix
            key_total_length + // key
            1 + // valye_rlp_prefix
            32;// value
    } else {
        rlp_data_length = 
            key_total_length + // key
            1 + // valye_rlp_prefix
            32;// value
    }
    if rlp_data_length > 55 {
        encoded[encoding_index] = 0xF8;
        encoding_index += 1;
        encoded[encoding_index] = rlp_data_length;
        encoding_index += 1;
    } else {
        encoded[encoding_index] = 0xC0 + rlp_data_length;
        encoding_index += 1;
    }
    if key_total_length != 1 {
        encoded[encoding_index] = 0x80 + key_total_length;
        encoding_index += 1;
    }
    encoded[encoding_index] = first_limb * 0x10 + second_limb;
    encoding_index += 1;
    for i in 0 .. 31 {
        if i + 1 <= key_total_length - 1 {
            encoded[encoding_index] = node.rows[1][i as u32];
            encoding_index += 1;
        }
    }
    encoded[encoding_index] = 0xA0;
    encoding_index += 1;
    for i in 0 .. 32 {
        encoded[encoding_index] = node.rows[2][i];
        encoding_index += 1;
    }
    keccak256::keccak256(encoded, encoding_index)
}


pub fn calculate_branch_hash(node: Node) -> [u8; 32] {
    let mut len1: u8 = 0;
    let mut len2: u8 = 0;
    let mut encoded: [u8; 532] = [0; 532];
    let mut index: u32 = 0;
    for i in 0 .. 16 {
        if node.row_exist[i] == true {
            if len2 > 255 - 33 {
                len1 += 1;
                len2 = len2 - 223;
            } else {
                len2 += 33;
            }
        } else {
            if len2 == 255 {
                len2 = 0;
                len1 += 1;
            } else {
                len2 += 1;
            }
        }
    }
    if len2 == 255 {
        len2 = 0;
        len1 += 1;
    } else {
        len2 += 1;
    }
    if (len1 == 0) & (len2 <= 55) {
        encoded[index] = 0xc0 + len2;
        index += 1;
    } else if len1 == 0 {
        encoded[index] = 0xf8;
        index += 1;
        encoded[index] = len2;
        index += 1;
    } else {
        encoded[index] = 0xf9;
        index += 1;
        encoded[index] = len1;
        index += 1;
        encoded[index] = len2;
        index += 1;
    }

    for i in 0 .. 16 {
        if node.row_exist[i] == true {
            encoded[index] = 0xa0;
            index += 1;
            for j in 0 .. 32 {
                encoded[index] = node.rows[i][j];
                index += 1;
            }
        } else {
            encoded[index] = 0x80;
            index += 1;
        }
    }
    encoded[index] = 0x80;
    index += 1;
    keccak256::keccak256(encoded, index)

}

pub fn verify_nodes<let MAX_PATH_LEANGTH: u32>(
    nodes: [Node; MAX_PATH_LEANGTH], 
    node_length: u32,
    trie_key_index: u32,
    root: [u8; 32],
    trie_key: [u8; 32],
    trie_key_new_index: u32,
    new_root: [u8; 32]
    ) {
        let mut parent = root;
        let mut prefix_length_limb: u32 = trie_key_index;
        for i in 0 .. MAX_PATH_LEANGTH {
            if (i < node_length) {
                if nodes[i].node_type == 0 { 
                    // branch node
                    let h = calculate_branch_hash(nodes[i]);
                    println("parent: ");
                    parent.for_each(|x| {
                        print(f"{x}, ");
                    });
                    println(f"");
                    assert(h == parent);
                    let prefix_length_byte: u32 = prefix_length_limb/2;
                    let mut index = trie_key[prefix_length_byte] as u32;
                    if prefix_length_limb % 2 == 0 {
                        index = index >> 4;
                    } else {
                        index = index - (index >> 4) * 0x10;
                    }
                    parent = nodes[i].rows[index];
                    prefix_length_limb += 1;
                    h.for_each(|x| {
                        print(f"{x}, ");
                    });
                    println("");
                } else if nodes[i].node_type == 1 {
                    // extension nodes
                    println("extension node:");
                    let h = calculate_extension_hash(nodes[i]);
                    println("parent: ");
                    parent.for_each(|x| {
                        print(f"{x}, ");
                    });
                    println(f"");
                    assert(h == parent);
                    let mut extension: u128 = 0;
                    let mut extension_length_limb: u32 = 0;
                    let extension_length_byte: u32 = nodes[i].rows[0][2] as u32;
                    let first_limb: u32 = nodes[i].rows[0][0] as u32;
                    let second_limb: u32 = (nodes[i].rows[0][1] % 16) as u32;
                    assert(extension_length_byte <= 16); // because extension is 128 bits and we will never have such a big extension!
                    assert(first_limb * (1 - first_limb) == 0);
                    assert((1 - first_limb) * second_limb == 0); // if first_limb == 0, second_limb == 0
                    extension_length_limb = (extension_length_byte * 2 + first_limb) as u32;
                    assert(extension_length_limb != 0);
                    extension += second_limb as u128;
                    for j in 0 .. 15 {
                        if j < extension_length_byte {
                            extension *= 0x100;
                            extension += nodes[i].rows[1][j] as u128;
                        }
                    }
                    println(f"extension length {extension_length_byte}");
                    println(f"extension {extension}");
                    let mut key_extension: u128 = 0;
                    let mut limb_left = extension_length_limb;
                    let prefix_length_byte: u32 = prefix_length_limb/2;
                    let mut trie_key_index = prefix_length_byte;
                    if prefix_length_limb % 2 == 1 {
                        limb_left -= 1;
                        let first_byte = trie_key[trie_key_index] as u32;
                        key_extension += (first_byte - (first_byte >> 4) * 0x10) as u128;
                        trie_key_index += 1;
                    }
                    for _ in 0 .. 15 {
                        let next_byte = trie_key[trie_key_index] as u32;
                        if limb_left == 1{
                            key_extension *= 0x10;
                            key_extension += (next_byte >> 4) as u128;
                            limb_left = 0;

                        } else if limb_left != 0 {
                            key_extension *= 0x100;
                            key_extension += next_byte as u128;
                            limb_left -= 2;
                        }
                        trie_key_index += 1;

                    }
                    assert(key_extension == extension);

                    prefix_length_limb += extension_length_limb;
                    parent = nodes[i].rows[2];
                } else {
                    assert(false);
                }
            }
        }
        println("new root:");
        parent.for_each(|x| {
            print(f"{x}, ");
        });
        println("");
        assert(trie_key_new_index == prefix_length_limb);
        assert(new_root == parent);
}

#[test]
fn test_mpt_body() {
    let root = [19, 78, 152, 19, 191, 21, 155, 27, 75, 107, 136, 229, 122, 128, 245, 63, 37, 234, 92, 62, 146, 5, 248, 91, 236, 58, 105, 161, 121, 4, 169, 80];
    let node_length = 9;
    let trie_key = [86, 212, 4, 220, 64, 55, 131, 71, 253, 17, 132, 60, 13, 84, 101, 34, 128, 23, 137, 30, 227, 104, 191, 15, 142, 248, 247, 165, 152, 253, 12, 161];
    let trie_key_new_index = 15;
    let new_root = [104,  193,  18,  179,  27,  201,  22,  252,  246,  52,  199,  200,  174,  210,  248,  155,  133,  147,  77,  5,  48,  175,  153,  56,  221,  233,  153,  60,  201,  51,  117,  113];
    let nodes: [Node; 9] = [
        Node {
            rows: [[91, 206,  84,  26,  253,  125,  244,  71,  169,  81,  188,  29,  52,  232,  107,  198,  4,  236,  192,  56,  214,  134,  71,  155,  63,  222,  78,  254,  103,  228,  120,  213], [5,  66,  165,  88,  145,  62,  95,  112,  162,  28,  84,  109,  191,  228,  53,  78,  111,  216,  23,  142,  9,  20,  183,  200,  103,  255,  11,  216,  132,  172,  203,  179], [192,  111,  5,  255,  111,  91,  216,  41,  234,  211,  51,  88,  121,  47,  50,  131,  128,  71,  127,  171,  138,  215,  171,  67,  142,  145,  44,  93,  79,  143,  171,  24], [36,  170,  52,  15,  177,  232,  242,  51,  173,  133,  62,  106,  152,  238,  188,  55,  233,  41,  61,  87,  110,  197,  178,  233,  171,  28,  191,  225,  253,  169,  51,  197], [215,  76,  114,  164,  3,  164,  224,  65,  73,  83,  209,  180,  93,  109,  121,  11,  78,  236,  29,  239,  43,  131,  42,  132,  173,  186,  61,  143,  119,  24,  27,  214], [217,  72,  58,  29,  132,  129,  254,  61,  30,  190,  33,  191,  252,  112,  222,  123,  141,  231,  29,  139,  69,  250,  187,  71,  184,  74,  155,  200,  68,  171,  148,  213], [71,  205,  18,  82,  35,  167,  200,  2,  132,  65,  221,  26,  183,  160,  214,  202,  176,  93,  227,  247,  255,  168,  211,  48,  28,  151,  211,  150,  214,  179,  98,  5], [39,  29,  4,  215,  70,  118,  104,  187,  237,  232,  222,  215,  0,  227,  60,  182,  60,  235,  203,  102,  132,  98,  47,  108,  107,  186,  251,  222,  20,  155,  13,  83], [178,  55,  97,  31,  173,  83,  229,  215,  100,  118,  34,  165,  234,  117,  124,  73,  50,  194,  33,  120,  93,  196,  246,  155,  226,  19,  139,  131,  58,  83,  20,  143], [106,  197,  57,  235,  65,  124,  200,  105,  37,  159,  139,  249,  237,  35,  229,  34,  93,  101,  152,  65,  174,  109,  161,  92,  104,  97,  54,  135,  156,  61,  39,  152], [76,  206,  8,  47,  128,  231,  2,  20,  2,  177,  234,  160,  165,  73,  29,  148,  0,  107,  92,  79,  254,  3,  97,  89,  22,  216,  113,  99,  111,  58,  229,  249], [177,  91,  171,  32,  247,  141,  226,  148,  139,  48,  106,  177,  52,  122,  233,  175,  62,  210,  225,  138,  171,  199,  23,  142,  60,  97,  131,  159,  217,  61,  59,  225], [14,  248,  170,  196,  107,  139,  86,  244,  190,  239,  246,  164,  216,  233,  203,  140,  241,  78,  21,  21,  202,  204,  211,  242,  149,  156,  154,  162,  42,  42,  160,  147], [203,  132,  235,  189,  108,  158,  58,  1,  245,  16,  135,  142,  48,  144,  104,  135,  205,  84,  145,  105,  234,  54,  63,  83,  83,  11,  99,  220,  17,  174,  12,  188], [189,  108,  183,  56,  100,  20,  71,  33,  162,  178,  27,  181,  66,  0,  173,  71,  1,  180,  205,  238,  237,  176,  156,  162,  245,  48,  107,  94,  24,  122,  245,  136], [214,  238,  248,  14,  3,  218,  131,  222,  46,  45,  60,  242,  101,  161,  96,  215,  165,  189,  21,  122,  238,  97,  126,  155,  224,  254,  16,  97,  131,  44,  253,  99]],
            row_exist: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true],
            node_type: 0
        }, Node {
            rows: [[52, 52,  255,  138,  27,  81,  230,  51,  119,  178,  84,  136,  34,  60,  124,  105,  173,  253,  177,  169,  21,  254,  6,  12,  99,  63,  130,  95,  171,  156,  72,  202], [71,  66,  151,  239,  144,  18,  18,  40,  71,  34,  250,  232,  99,  102,  76,  43,  225,  32,  131,  244,  205,  215,  40,  251,  160,  25,  147,  98,  126,  73,  242,  47], [87,  167,  98,  4,  131,  146,  204,  36,  120,  168,  58,  231,  206,  250,  48,  189,  236,  208,  206,  239,  99,  74,  82,  180,  209,  252,  72,  146,  248,  239,  63,  81], [151,  215,  178,  179,  81,  91,  182,  197,  82,  218,  70,  61,  105,  92,  23,  246,  94,  184,  212,  79,  237,  47,  153,  75,  100,  46,  110,  148,  54,  173,  227,  96], [19,  65,  18,  12,  207,  221,  198,  10,  171,  123,  203,  2,  168,  14,  183,  217,  189,  196,  62,  173,  122,  97,  177,  185,  28,  143,  121,  204,  235,  135,  199,  252], [128,  59,  88,  164,  11,  233,  27,  138,  168,  243,  118,  239,  215,  212,  81,  88,  188,  131,  99,  171,  153,  231,  224,  51,  97,  115,  212,  167,  49,  50,  100,  123], [3,  105,  139,  53,  11,  150,  232,  92,  130,  124,  20,  194,  165,  190,  179,  28,  180,  185,  120,  241,  225,  20,  245,  14,  150,  68,  98,  173,  83,  118,  148,  247], [45,  229,  114,  122,  123,  82,  33,  53,  60,  112,  69,  53,  102,  180,  29,  177,  115,  3,  184,  171,  236,  252,  65,  13,  26,  249,  178,  143,  251,  48,  66,  12], [18,  68,  19,  15,  5,  69,  242,  103,  35,  40,  155,  73,  4,  94,  124,  196,  58,  180,  159,  119,  210,  147,  6,  44,  217,  178,  6,  182,  15,  26,  78,  84], [237,  28,  109,  240,  215,  170,  83,  39,  87,  246,  138,  222,  44,  243,  249,  98,  27,  71,  196,  128,  119,  48,  134,  58,  91,  47,  252,  20,  109,  197,  135,  155], [193,  170,  89,  31,  47,  225,  144,  237,  170,  71,  223,  126,  84,  220,  194,  38,  244,  225,  164,  177,  148,  12,  99,  191,  169,  79,  126,  154,  16,  12,  176,  11], [208,  68,  184,  114,  158,  21,  232,  136,  41,  185,  245,  218,  1,  68,  128,  199,  209,  53,  5,  150,  164,  161,  180,  165,  75,  119,  69,  11,  19,  30,  46,  112], [45,  238,  18,  138,  149,  101,  118,  190,  110,  109,  85,  65,  175,  62,  15,  165,  42,  80,  251,  111,  218,  221,  176,  61,  119,  127,  114,  115,  85,  16,  132,  10], [24,  242,  48,  75,  66,  132,  60,  119,  180,  114,  74,  113,  21,  233,  218,  168,  189,  170,  247,  250,  62,  18,  219,  223,  190,  99,  224,  36,  130,  67,  238,  98], [117,  46,  67,  158,  89,  196,  72,  194,  106,  213,  9,  45,  200,  78,  137,  246,  212,  82,  234,  195,  80,  24,  229,  82,  19,  87,  168,  227,  145,  58,  50,  139], [5,  246,  253,  35,  129,  111,  51,  253,  29,  58,  100,  35,  101,  163,  254,  168,  114,  27,  171,  76,  198,  94,  140,  80,  30,  47,  220,  197,  78,  82,  75,  85]],
            row_exist: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true],
            node_type: 0
        }, Node {
            rows: [[1, 179,  85,  45,  168,  20,  215,  178,  77,  179,  78,  147,  210,  191,  65,  72,  179,  30,  232,  75,  143,  183,  232,  226,  146,  232,  255,  193,  223,  1,  199,  164], [37,  61,  160,  105,  132,  10,  130,  23,  158,  178,  28,  238,  155,  41,  50,  40,  89,  54,  247,  20,  153,  236,  26,  201,  119,  182,  108,  177,  133,  4,  245,  141], [206,  213,  245,  172,  4,  55,  53,  56,  63,  40,  15,  59,  124,  4,  151,  249,  25,  211,  10,  54,  235,  138,  179,  158,  182,  69,  70,  109,  70,  133,  199,  86], [43,  25,  94,  218,  251,  128,  33,  247,  173,  161,  230,  204,  36,  71,  2,  206,  232,  125,  90,  79,  206,  230,  139,  174,  135,  14,  129,  89,  104,  192,  83,  142], [193,  119,  160,  254,  59,  80,  141,  42,  154,  251,  13,  225,  110,  81,  128,  18,  105,  249,  193,  46,  147,  89,  156,  229,  239,  222,  239,  113,  204,  11,  2,  173], [168,  96,  16,  33,  177,  55,  0,  130,  45,  254,  206,  103,  58,  87,  23,  119,  20,  27,  107,  46,  165,  247,  250,  3,  51,  149,  115,  123,  65,  22,  55,  0], [62,  158,  134,  131,  182,  231,  147,  82,  64,  177,  82,  82,  184,  168,  175,  203,  242,  78,  215,  81,  63,  48,  149,  68,  73,  84,  178,  144,  38,  161,  16,  118], [151,  49,  222,  179,  106,  96,  183,  185,  190,  184,  73,  77,  54,  140,  167,  187,  216,  4,  145,  100,  148,  61,  100,  253,  17,  64,  203,  49,  143,  27,  218,  98], [164,  196,  186,  18,  189,  2,  64,  134,  29,  240,  96,  145,  206,  41,  129,  162,  236,  4,  82,  46,  46,  174,  246,  8,  19,  66,  50,  163,  137,  47,  153,  117], [70,  102,  87,  31,  99,  36,  106,  41,  201,  57,  93,  42,  57,  68,  69,  151,  44,  84,  120,  123,  69,  8,  148,  240,  243,  182,  73,  238,  123,  119,  77,  214], [27,  204,  175,  221,  241,  162,  237,  205,  152,  53,  81,  193,  243,  49,  244,  12,  44,  177,  36,  75,  145,  188,  232,  106,  36,  73,  138,  86,  41,  92,  216,  64], [8,  184,  83,  47,  252,  114,  109,  151,  201,  169,  104,  121,  249,  200,  183,  63,  36,  49,  170,  212,  165,  83,  25,  83,  134,  39,  231,  41,  66,  134,  37,  234], [80,  235,  238,  102,  76,  90,  52,  9,  251,  199,  118,  192,  151,  80,  31,  107,  116,  160,  116,  239,  255,  64,  159,  23,  137,  31,  43,  15,  213,  186,  163,  92], [215,  194,  43,  25,  249,  105,  122,  204,  145,  54,  116,  27,  219,  2,  165,  186,  19,  180,  59,  75,  68,  4,  8,  189,  125,  148,  166,  88,  211,  89,  32,  169], [61,  185,  92,  15,  131,  232,  108,  39,  150,  51,  76,  191,  198,  116,  53,  156,  139,  61,  46,  59,  134,  173,  124,  183,  52,  23,  21,  41,  174,  197,  112,  230], [179,  46,  95,  224,  86,  94,  134,  16,  185,  247,  6,  105,  14,  252,  153,  75,  12,  254,  230,  130,  130,  103,  42,  58,  44,  230,  90,  49,  44,  135,  70,  175]],
            row_exist: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true],
            node_type: 0
        }, Node {
            rows: [[148, 124,  197,  240,  160,  72,  145,  53,  0,  225,  144,  219,  108,  202,  127,  173,  93,  84,  141,  108,  177,  18,  242,  93,  41,  158,  78,  70,  237,  146,  130,  198], [84,  251,  36,  234,  54,  61,  130,  218,  228,  86,  17,  26,  168,  253,  56,  228,  28,  138,  130,  80,  199,  202,  227,  187,  227,  51,  123,  18,  31,  45,  242,  28], [133,  205,  207,  136,  92,  160,  213,  123,  182,  85,  238,  7,  80,  40,  157,  23,  255,  50,  35,  163,  248,  56,  223,  33,  138,  182,  240,  198,  103,  235,  120,  37], [221,  79,  90,  152,  216,  64,  235,  165,  61,  158,  189,  216,  198,  91,  23,  45,  155,  37,  42,  102,  102,  21,  99,  229,  246,  64,  251,  207,  10,  181,  83,  32], [70,  33,  232,  9,  197,  106,  10,  5,  65,  196,  164,  196,  161,  206,  152,  123,  7,  45,  135,  31,  185,  120,  174,  24,  127,  120,  33,  137,  219,  19,  82,  54], [65,  103,  163,  111,  66,  48,  66,  52,  145,  178,  28,  20,  6,  43,  117,  0,  252,  132,  54,  142,  229,  214,  251,  49,  145,  1,  105,  225,  123,  127,  223,  62], [186,  249,  93,  222,  184,  8,  155,  238,  162,  100,  125,  151,  231,  48,  176,  138,  239,  245,  90,  52,  114,  165,  127,  245,  213,  255,  153,  127,  77,  67,  38,  149], [91,  61,  210,  86,  236,  81,  168,  26,  171,  199,  132,  108,  168,  140,  51,  59,  173,  10,  37,  230,  242,  138,  233,  99,  101,  243,  75,  65,  4,  237,  201,  128], [16,  155,  192,  163,  145,  82,  67,  194,  82,  240,  186,  224,  249,  191,  70,  232,  119,  111,  42,  126,  147,  195,  30,  145,  3,  15,  107,  6,  89,  173,  254,  192], [122,  99,  22,  179,  31,  180,  116,  35,  127,  97,  58,  23,  242,  158,  46,  88,  163,  154,  226,  128,  184,  120,  46,  47,  144,  244,  82,  91,  127,  82,  200,  186], [111,  50,  214,  120,  162,  218,  191,  159,  80,  224,  148,  32,  111,  87,  113,  130,  94,  98,  10,  16,  89,  3,  189,  14,  91,  234,  29,  173,  207,  236,  8,  110], [198,  26,  74,  18,  153,  60,  51,  145,  139,  176,  60,  102,  7,  8,  234,  63,  10,  206,  120,  148,  90,  85,  2,  250,  76,  212,  238,  40,  13,  241,  243,  169], [182,  65,  107,  243,  38,  57,  158,  244,  30,  157,  245,  243,  87,  241,  81,  79,  116,  165,  38,  196,  5,  246,  56,  181,  241,  108,  128,  129,  30,  6,  148,  116], [106,  30,  33,  27,  170,  192,  221,  73,  47,  60,  9,  31,  62,  163,  232,  156,  164,  135,  97,  11,  32,  237,  97,  118,  200,  155,  162,  207,  218,  89,  179,  220], [188,  11,  35,  237,  242,  85,  26,  60,  126,  241,  126,  45,  106,  250,  51,  46,  134,  198,  57,  12,  81,  8,  101,  120,  155,  242,  63,  24,  132,  180,  169,  252], [204,  199,  96,  3,  64,  83,  246,  94,  88,  23,  6,  186,  151,  132,  98,  235,  87,  174,  88,  56,  145,  144,  16,  7,  57,  35,  94,  244,  233,  58,  191,  244]],
            row_exist: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true],
            node_type: 0
        }, Node {
            rows: [[61, 123,  231,  46,  147,  38,  44,  193,  114,  225,  170,  148,  85,  135,  89,  178,  169,  122,  84,  35,  190,  251,  45,  18,  116,  231,  0,  111,  210,  159,  182,  231], [139,  34,  248,  31,  220,  223,  50,  144,  69,  24,  137,  71,  1,  107,  10,  10,  35,  158,  176,  183,  226,  159,  162,  223,  129,  215,  76,  111,  154,  163,  10,  153], [125,  38,  179,  114,  73,  111,  112,  23,  248,  15,  213,  3,  227,  241,  92,  210,  26,  1,  191,  238,  32,  44,  34,  134,  165,  163,  211,  173,  209,  109,  96,  211], [147,  143,  33,  33,  55,  204,  82,  168,  227,  15,  82,  15,  186,  184,  112,  28,  91,  102,  86,  122,  133,  2,  62,  213,  72,  62,  124,  5,  252,  35,  20,  58], [162,  183,  109,  26,  112,  66,  141,  58,  202,  17,  22,  91,  147,  6,  114,  235,  9,  216,  220,  36,  39,  141,  32,  122,  112,  14,  38,  198,  166,  103,  92,  119], [113,  254,  205,  234,  49,  31,  30,  232,  53,  165,  12,  55,  213,  92,  81,  45,  169,  169,  75,  15,  211,  20,  247,  188,  222,  208,  175,  203,  113,  0,  60,  52], [169,  179,  241,  55,  106,  35,  6,  35,  179,  103,  175,  247,  227,  130,  0,  95,  215,  1,  163,  22,  173,  73,  46,  17,  40,  32,  91,  126,  99,  38,  134,  142], [109,  79,  64,  95,  212,  249,  233,  235,  22,  56,  165,  202,  198,  125,  50,  122,  95,  183,  23,  247,  216,  195,  117,  164,  144,  72,  212,  157,  69,  253,  140,  183], [226,  132,  135,  26,  175,  223,  62,  91,  181,  118,  233,  67,  81,  145,  105,  201,  153,  209,  100,  176,  118,  156,  59,  109,  76,  239,  208,  231,  88,  79,  88,  8], [102,  12,  67,  153,  181,  126,  95,  137,  217,  65,  13,  109,  229,  131,  93,  218,  207,  77,  182,  126,  14,  195,  151,  38,  172,  108,  83,  8,  202,  30,  243,  181], [167,  16,  219,  193,  0,  112,  67,  63,  45,  140,  131,  246,  85,  60,  35,  4,  110,  224,  209,  207,  77,  68,  91,  7,  93,  173,  181,  249,  118,  94,  169,  52], [138,  248,  138,  84,  31,  66,  29,  144,  81,  219,  79,  213,  75,  147,  2,  27,  82,  9,  117,  135,  244,  201,  228,  25,  3,  152,  5,  95,  75,  39,  154,  129], [104,  117,  29,  164,  19,  133,  47,  24,  98,  74,  4,  54,  110,  76,  79,  79,  99,  100,  178,  202,  199,  94,  26,  43,  58,  122,  75,  81,  44,  70,  78,  54], [88,  186,  111,  148,  187,  208,  134,  253,  103,  51,  111,  19,  163,  112,  126,  90,  74,  131,  30,  156,  197,  246,  43,  16,  235,  189,  169,  26,  155,  228,  223,  17], [232,  129,  174,  147,  201,  18,  145,  57,  222,  167,  77,  183,  192,  241,  254,  48,  34,  226,  201,  230,  216,  199,  74,  208,  205,  126,  214,  254,  240,  137,  248,  132], [77,  199,  34,  131,  59,  89,  7,  211,  13,  195,  6,  72,  32,  95,  100,  199,  151,  36,  119,  219,  65,  173,  220,  65,  75,  233,  98,  213,  121,  98,  100,  121]],
            row_exist: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true],
            node_type: 0
        }, Node {
            rows: [[252, 105,  54,  146,  193,  32,  19,  162,  182,  138,  216,  211,  152,  73,  244,  209,  196,  96,  28,  189,  57,  165,  0,  119,  78,  222,  160,  163,  83,  87,  8,  227], [75,  27,  18,  102,  28,  149,  125,  117,  128,  225,  109,  229,  48,  105,  64,  239,  176,  151,  251,  52,  253,  84,  82,  104,  197,  127,  181,  165,  21,  213,  198,  139], [45,  36,  143,  195,  121,  252,  71,  32,  140,  243,  119,  36,  177,  81,  117,  89,  194,  82,  10,  133,  86,  48,  9,  23,  27,  106,  186,  177,  244,  190,  183,  109], [140,  245,  224,  37,  253,  3,  245,  134,  174,  28,  204,  139,  38,  229,  54,  253,  120,  38,  154,  84,  90,  80,  164,  110,  171,  69,  209,  168,  242,  84,  185,  245], [218,  79,  31,  133,  157,  46,  98,  181,  108,  150,  31,  192,  151,  169,  117,  17,  175,  177,  192,  97,  13,  71,  94,  179,  112,  252,  213,  92,  73,  115,  50,  172], [98,  25,  120,  211,  196,  43,  6,  217,  87,  39,  92,  161,  157,  62,  92,  124,  101,  201,  130,  142,  175,  119,  56,  203,  57,  8,  153,  209,  235,  229,  159,  64], [252,  243,  0,  250,  74,  63,  18,  99,  196,  0,  26,  141,  219,  126,  105,  101,  78,  13,  227,  157,  243,  155,  192,  209,  184,  126,  235,  193,  30,  143,  64,  89], [130,  58,  77,  150,  91,  117,  93,  57,  85,  17,  189,  75,  172,  207,  14,  219,  103,  230,  214,  74,  247,  137,  206,  210,  168,  13,  235,  200,  176,  230,  255,  244], [124,  36,  3,  103,  227,  40,  73,  182,  178,  164,  8,  250,  4,  212,  244,  115,  120,  172,  110,  145,  93,  3,  58,  68,  128,  121,  168,  216,  12,  49,  180,  255], [109,  138,  140,  29,  152,  26,  57,  74,  183,  205,  6,  106,  251,  114,  161,  141,  11,  47,  141,  121,  1,  222,  58,  195,  159,  133,  93,  173,  207,  122,  240,  114], [37,  17,  161,  107,  165,  1,  31,  188,  47,  73,  141,  188,  17,  21,  187,  75,  201,  145,  191,  55,  55,  182,  18,  168,  245,  110,  139,  159,  250,  84,  96,  219], [208,  87,  38,  62,  241,  70,  141,  103,  122,  55,  41,  63,  56,  85,  122,  86,  75,  92,  238,  99,  51,  28,  176,  145,  161,  236,  253,  11,  46,  79,  81,  2], [33,  131,  224,  95,  149,  52,  141,  221,  172,  116,  54,  74,  54,  182,  181,  175,  34,  103,  26,  35,  96,  186,  30,  21,  109,  152,  99,  202,  212,  221,  253,  208], [243,  144,  190,  92,  213,  153,  100,  131,  111,  86,  251,  119,  113,  183,  33,  192,  193,  35,  108,  239,  205,  201,  18,  151,  76,  202,  191,  39,  105,  186,  18,  13], [4,  108,  158,  30,  57,  66,  180,  135,  251,  16,  197,  64,  56,  53,  169,  101,  156,  12,  147,  16,  2,  159,  158,  7,  221,  155,  50,  149,  112,  122,  62,  167], [241,  160,  186,  218,  14,  180,  125,  148,  24,  244,  163,  233,  152,  222,  156,  196,  34,  200,  62,  6,  132,  131,  32,  116,  99,  66,  161,  33,  212,  240,  160,  220]],
            row_exist: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true],
            node_type: 0
        }, Node {
            rows: [[80, 166,  19,  154,  40,  10,  131,  219,  245,  139,  58,  88,  78,  224,  39,  51,  32,  76,  52,  130,  93,  156,  85,  107,  181,  73,  57,  86,  159,  107,  106,  229], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [66,  135,  87,  75,  71,  175,  160,  172,  159,  205,  240,  16,  60,  230,  65,  227,  80,  242,  47,  84,  182,  186,  72,  192,  242,  32,  103,  208,  102,  98,  67,  209], [52,  196,  223,  127,  22,  143,  109,  115,  219,  217,  231,  75,  224,  88,  120,  189,  214,  247,  187,  167,  92,  225,  185,  19,  204,  10,  181,  157,  221,  219,  122,  188], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [182,  160,  163,  37,  22,  46,  181,  29,  168,  97,  220,  136,  104,  223,  33,  146,  4,  131,  73,  245,  103,  12,  68,  145,  168,  113,  157,  71,  27,  186,  81,  186], [101,  174,  55,  16,  249,  9,  91,  68,  69,  137,  139,  117,  145,  91,  210,  214,  146,  68,  220,  121,  56,  105,  196,  186,  131,  220,  227,  233,  25,  110,  233,  183], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [197,  162,  234,  34,  8,  175,  74,  33,  130,  169,  141,  203,  181,  170,  243,  114,  22,  9,  133,  150,  148,  184,  206,  31,  121,  116,  131,  182,  128,  46,  203,  42], [121,  239,  63,  159,  0,  138,  117,  123,  148,  5,  241,  108,  47,  158,  212,  115,  26,  170,  141,  186,  154,  60,  178,  111,  129,  45,  209,  127,  76,  81,  45,  117], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [145,  54,  209,  32,  177,  81,  15,  42,  103,  8,  154,  74,  140,  29,  8,  7,  192,  222,  15,  235,  39,  24,  177,  93,  77,  180,  235,  154,  72,  112,  195,  112], [82,  124,  110,  139,  7,  2,  147,  167,  82,  36,  10,  11,  135,  192,  253,  209,  91,  190,  82,  138,  241,  108,  54,  113,  21,  80,  118,  111,  150,  237,  85,  72], [61,  168,  37,  181,  55,  201,  125,  21,  76,  8,  98,  136,  91,  217,  68,  179,  76,  157,  90,  160,  81,  39,  167,  24,  122,  184,  218,  169,  6,  141,  244,  45]],
            row_exist: [true, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true],
            node_type: 0
        }, Node {
            rows: [[1, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [64, 55, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [202, 167,  151,  102,  129,  204,  206,  220,  159,  100,  187,  156,  174,  133,  187,  112,  105,  208,  212,  254,  92,  159,  242,  98,  145,  103,  186,  34,  92,  102,  125,  215], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[197, 162, 234, 34, 8, 175, 74, 33, 130, 169, 141, 203, 181, 170, 243, 114, 22, 9, 133, 150, 148, 184, 206, 31, 121, 116, 131, 182, 128, 46, 203, 42],[121, 239, 63, 159, 0, 138, 117, 123, 148, 5, 241, 108, 47, 158, 212, 115, 26, 170, 141, 186, 154, 60, 178, 111, 129, 45, 209, 127, 76, 81, 45, 117], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[255, 118, 0, 244, 57, 8, 242, 78, 198, 37, 36, 190, 105, 221, 18, 178, 111, 201, 78, 211, 62, 107, 157, 95, 123, 19, 150, 129, 169, 175, 142, 127],[82, 124, 110, 139, 7, 2, 147, 167, 82, 36, 10, 11, 135, 192, 253, 209, 91, 190, 82, 138, 241, 108, 54, 113, 21, 80, 118, 111, 150, 237, 85, 72],[61, 168, 37, 181, 55, 201, 125, 21, 76, 8, 98, 136, 91, 217, 68, 179, 76, 157, 90, 160, 81, 39, 167, 24, 122, 184, 218, 169, 6, 141, 244, 45]],
            row_exist: [false, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true],
            node_type: 1
        }, Node {
            rows: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [104,  193,  18,  179,  27,  201,  22,  252,  246,  52,  199,  200,  174,  210,  248,  155,  133,  147,  77,  5,  48,  175,  153,  56,  221,  233,  153,  60,  201,  51,  117,  113], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [202,  48,  240,  12,  223,  105,  106,  199,  20,  14,  166,  68,  232,  55,  58,  38,  231,  1,  6,  169,  20,  91,  60,  191,  97,  14,  194,  156,  234,  116,  181,  7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
            row_exist: [false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false],
            node_type: 0
        }
    ];
    verify_nodes(nodes, node_length, 0, root, trie_key, trie_key_new_index, new_root);

}